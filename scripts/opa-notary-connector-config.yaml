apiVersion: v1
kind: ConfigMap
metadata:
  name: opa-notary-connector-config
  namespace: webhook
data:
  trust.yaml: |
    repositories:
      - name: "localhost.*"
        priority: 10
        trust:
          enabled: true
          trustServer: "https://notary-server.notary.svc.cluster.local:4443"
          signers:
          - role: "targets/jenkins"
            publicKey: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURDakNDQWZJQ0NRQ3R3VmRKbHNpb3V6QU5CZ2txaGtpRzl3MEJBUXNGQURCSE1ROHdEUVlEVlFRS0RBWlQKU1VkSVZWQXhGVEFUQmdOVkJBc01ESEJ5YjJSMVkzUXRkR1ZoYlRFZE1Cc0dBMVVFQXd3VWIzQmhMVzV2ZEdGeQplUzFqYjI1dVpXTjBiM0l3SGhjTk1qQXdOekUxTURneE16TXpXaGNOTWpFd056RTFNRGd4TXpNeldqQkhNUTh3CkRRWURWUVFLREFaVFNVZElWVkF4RlRBVEJnTlZCQXNNREhCeWIyUjFZM1F0ZEdWaGJURWRNQnNHQTFVRUF3d1UKYjNCaExXNXZkR0Z5ZVMxamIyNXVaV04wYjNJd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFSwpBb0lCQVFDdy9Gb1NlRVBrM2UxaEpVZFhKQnRyUHY0R1JnTVNtR01rMXZFbTluMzhUcFU5Z05pM04zano4aHZjCllsOCtWMGlPNitMOXRHL3kxK1lFQkJNaUlFelVoaTRRTmxCSmtXTEpwMExWTWVHMDByTTMzRmpyVHhOWFhCWnkKTHMxcjJYRS80Z2pTRmtBcWc0SXE4bmpSQTM4MHoyQ2QvV09OelZEbjh4U1BwVk5INkxsZ2llTXNZVWpWZDJpbwoyTkh4TUtCa0xaSXhFRTZNU2hXaXpQSEpEaEtGMDMzUzFJN2VuSmhJZGhUcnNCMlFLTzdPMEpKWWNYazdCa1pVCklDaWJ1RjdtbTlGRk1FQ2JxU0piQWV5OE8zcWpESTNuMllmcVZ1RzJ5UVJCNkJwYVlSZS93MmxiQm8rK2lySkUKcXZwTk94YVU0VklicDVFQUZsUlJ6elVHYlpkUkFnTUJBQUV3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUVVcgppWXo0djdyYWRudUJ1U3Zmci9GazdNZWlIRzZiR3VJRktBRzA0SjZVRHdvcHB6MnVTMTBvM05RRnJWVVZoMU11Cm91cVViQ25Lbmh2WC9hbi8wN3FQZXQ1UC90L1JpaENGYXp4ZEFlTHR1Y3dyRXkrdWpsRjJUZnJjMXBBOFh4VEgKK2FldS8vdktTYnJuZ2xKOHpQS21NQ0lVVkJJU2J3eGtSbllnUy9qNEdMZnhYM1ZDMGpXL1FTTFUrS2R2ZDJ3UQpVYW9qSER6YUYwLzdSNjJMUDRLQzRTUHE4ZWlvSG80R0hIU1dBL0Z1RVRoMlhhdmdZMkc5L0NxY0dOVXNFUTg3Cm9aN2hiM2s2dXl4dWpmWndnYXhoTDIwcVYxb3dkeWErVHZreWZGQXpKYWZ6Tkl6K2d3c0N3T1hoUTRQMURxWUUKcDVVcWhJV1dYV09wZkxnOHhVcz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: opa-notary-connector-rules
  namespace: webhook
  labels:
    openpolicyagent.org/policy: rego
data:
  rules.rego: |-
    package kubernetes.admission

    image = {
      "Pod": "/spec/containers/%v/image",

      "CronJob": "/spec/jobTemplate/spec/template/spec/containers/%v/image",

      "Deployment": "/spec/template/spec/containers/%v/image",
      "Daemonset": "/spec/template/spec/containers/%v/image",
      "Job": "/spec/template/spec/containers/%v/image",
      "ReplicationController": "/spec/template/spec/containers/%v/image",
      "StatefulSet": "/spec/template/spec/containers/%v/image",
      "ReplicaSet": "/spec/template/spec/containers/%v/image"
    }

    gen_patch(k, i, c) = p {
      p := [{"op": "replace", "path": sprintf(image[k], [i]), "value": c}]
    }

    req_opa_notary_connector(s) = x {
      request := {
        "url": "http://localhost:8080/checkImage",
        "method": "POST",
        "body": {
          "image": s,
        }
      }
      x := http.send(request)
    }

    is_pod(k) = x {
      k != "CronJob"
      k != "Deployment"
      k != "Daemonset"
      k != "Job"
      k != "ReplicationController"
      k != "StatefulSet"
      k != "ReplicaSet"
      x := true
    }

    deny[msg] {
      is_pod(input.request.kind.kind)

      some j;
      container_image = input.request.object.spec.containers[j].image
      
      response := req_opa_notary_connector(container_image)
      response.status_code != 200
      error_message := response.body.error

      msg := sprintf("Container image %v invalid: %v", [container_image, error_message])
    }

    patches["pod_sha"] = patch {
      is_pod(input.request.kind.kind)

      some j;
      container_image = input.request.object.spec.containers[j].image

      response := req_opa_notary_connector(container_image)
      response.status_code == 200
      new_container_image := response.body.image

      patch := gen_patch(input.request.kind.kind, j, new_container_image)
    }
