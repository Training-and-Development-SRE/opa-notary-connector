apiVersion: v1
kind: ConfigMap
metadata:
  name: opa-notary-connector-config
  namespace: webhook
data:
  trust.yaml: |
    repositories:
      - name: "localhost.*"
        priority: 10
        trust:
          enabled: true
          trustServer: "https://notary-server.notary.svc.cluster.local:4443"
          signers:
          - role: "targets/jenkins"
            publicKey: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURDakNDQWZJQ0NRQzdDNHZqQnN0bW96QU5CZ2txaGtpRzl3MEJBUXNGQURCSE1ROHdEUVlEVlFRS0RBWlQKU1VkSVZWQXhGVEFUQmdOVkJBc01ESEJ5YjJSMVkzUXRkR1ZoYlRFZE1Cc0dBMVVFQXd3VWIzQmhMVzV2ZEdGeQplUzFqYjI1dVpXTjBiM0l3SGhjTk1qQXdOekUwTURrd01ESTBXaGNOTWpFd056RTBNRGt3TURJMFdqQkhNUTh3CkRRWURWUVFLREFaVFNVZElWVkF4RlRBVEJnTlZCQXNNREhCeWIyUjFZM1F0ZEdWaGJURWRNQnNHQTFVRUF3d1UKYjNCaExXNXZkR0Z5ZVMxamIyNXVaV04wYjNJd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFSwpBb0lCQVFDNWZsTk9rVXNTeFkwTW5uRjExMjJnYktFWk9mQ2R6cWlPUXVpeFBMVmEwc0huL2FEamVDQUk1K1VmCi9QRVdOL1JiZzJVdCtjZHNEUDFVV3RCMVJ6M1JvUDBZTnNtS3UyNHpvLzdTS2V4dXlFcFljalhQM1FtN3hKUEgKaXJRV2swcGNHYnIzMjJPWlRDK0t4Y0E1VVh5NGFpbElONUVIbGovcU9xM1Nzd3R5bG9GbGxBbkViRmRHcDRxWQpTWkFNczhoa0FLZU93REJjUEcxQW1WR0pOdGlrOWNscFlqSEdyUXBTOVd3OVgvUTVPNU8vK0gxSmF4ZnNCMElNCmZOdGxmTlhkTGs0STFmeGtjcTAvWlZoQ1Vmd2ZJT3NJNVdBaklVK3ZLQmx0QytENE82bUJtUmxJRDlUclZtcTEKb21KM0tRNjNZUFpHMVYxNTRnM2NhTU9KakpVNUFnTUJBQUV3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUNJcwp6VWsrWFk0NzJHSHQxWjl5VWdzOGkyN3pHQ0hUTUp3b2V3Y0RpL2FwQ0pNcFZHT3gvMEVsR1cxY2xySVZSbjhOCkN5a3NPaFlXbnBqVUVVRGYyZHY1SkRHSGpBK0ExTFNUUEVRYXhCTXEvOEhkekN1WFdsN2xrTDdXWW9KWWQvOWkKTFRIOUpBVkNtckh6VklLeWd3d1ZSVHIwZVhRbGJ1ZnpFd01TU0FUWFJmMTFwekorazZyVE1icmNIT2pJb3FreQpIVVZCOHJsb3RUMUgxdFBUOVVzcUhoR0N3eUdad2MwSkNSSXZwemJsdUc4ZUFCL1gxWXdmblQzbG9iQzczT2VXCnd0ZkdTd25EN3IwS2E0YWdoQVMraWtRNDdtdklIWFVOTzU3WUt3dXJkUllrMjZxQzZqRTZRM3haU1J3MC92SkIKbm1SaUl6SmJUWUQvYVluT3N6WT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: opa-notary-connector-rules
  namespace: webhook
  labels:
    openpolicyagent.org/policy: rego
data:
  rules.rego: |-
    package kubernetes.admission

    image = {
      "Pod": "/spec/containers/%v/image",

      "CronJob": "/spec/jobTemplate/spec/template/spec/containers/%v/image",

      "Deployment": "/spec/template/spec/containers/%v/image",
      "Daemonset": "/spec/template/spec/containers/%v/image",
      "Job": "/spec/template/spec/containers/%v/image",
      "ReplicationController": "/spec/template/spec/containers/%v/image",
      "StatefulSet": "/spec/template/spec/containers/%v/image",
      "ReplicaSet": "/spec/template/spec/containers/%v/image"
    }

    gen_patch(k, i, c) = p {
      p := [{"op": "replace", "path": sprintf(image[k], [i]), "value": c}]
    }

    req_opa_notary_connector(s) = x {
      request := {
        "url": "http://localhost:8080/checkImage",
        "method": "POST",
        "body": {
          "image": s,
        }
      }
      x := http.send(request)
    }

    deny[msg] {
      input.request.kind.kind != "CronJob"
      input.request.kind.kind != "Deployment"
      input.request.kind.kind != "Daemonset"
      input.request.kind.kind != "Job"
      input.request.kind.kind != "ReplicationController"
      input.request.kind.kind != "StatefulSet"
      input.request.kind.kind != "ReplicaSet"

      some j;
      container_image = input.request.object.spec.containers[j].image
      response := req_opa_notary_connector(container_image)
      response.status_code != 200
      error_message := response.body.error
      msg := sprintf("Container image %v invalid: %v", [container_image, error_message])
    }

    patches["pod_sha"] = patch {
      input.request.kind.kind != "CronJob"
      input.request.kind.kind != "Deployment"
      input.request.kind.kind != "Daemonset"
      input.request.kind.kind != "Job"
      input.request.kind.kind != "ReplicationController"
      input.request.kind.kind != "StatefulSet"
      input.request.kind.kind != "ReplicaSet"

      some j;
      container_image = input.request.object.spec.containers[j].image

      response := req_opa_notary_connector(container_image)
      response.status_code == 200
      new_container_image := response.body.image

      patch := gen_patch(input.request.kind.kind, j, new_container_image)
    }
